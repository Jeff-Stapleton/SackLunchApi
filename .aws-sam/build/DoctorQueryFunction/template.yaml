# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  staffer-api

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
- AWS::Serverless-2016-10-31

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Tracing: Active

Resources:
  # Appointment Resource
  AppointmentQueryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/appointment/query.query
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get all items from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the AppointmentTable
      - DynamoDBCrudPolicy:
          TableName: !Ref AppointmentTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref AppointmentTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /appointment
            Method: GET
            RestApiId:
              Ref: StafferGateway

  AppointmentReadFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/appointment/read.read
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get one item by id from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the AppointmentTable
      - DynamoDBCrudPolicy:
          TableName: !Ref AppointmentTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref AppointmentTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /appointment/{id}
            Method: GET
            RestApiId:
              Ref: StafferGateway

  AppointmentCreateFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/appointment/create.create
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the AppointmentTable
      - DynamoDBCrudPolicy:
          TableName: !Ref AppointmentTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref AppointmentTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /appointment
            Method: POST
            RestApiId:
              Ref: StafferGateway
 
  AppointmentTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  # Location Resource
  LocationCreateFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/location/create.create
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the LocationTable
      - DynamoDBCrudPolicy:
          TableName: !Ref LocationTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref LocationTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /location
            Method: POST
            RestApiId:
              Ref: StafferGateway
 
  LocationReadFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/location/read.read
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get one item by id from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the LocationTable
      - DynamoDBCrudPolicy:
          TableName: !Ref LocationTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref LocationTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /location/{id}
            Method: GET
            RestApiId:
              Ref: StafferGateway

  LocationQueryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/location/query.query
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get all items from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the AppointmentTable
      - DynamoDBCrudPolicy:
          TableName: !Ref LocationTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref LocationTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /location
            Method: GET
            RestApiId:
              Ref: StafferGateway

  LocationTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  # Patient Resource
  PatientCreateFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/patient/create.create
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the LocationTable
      - DynamoDBCrudPolicy:
          TableName: !Ref PatientTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref PatientTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /patient
            Method: POST
            RestApiId:
              Ref: StafferGateway
 
  PatientReadFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/patient/read.read
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get one item by id from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the PatientTable
      - DynamoDBCrudPolicy:
          TableName: !Ref PatientTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref PatientTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /patient/{id}
            Method: GET
            RestApiId:
              Ref: StafferGateway

  PatientQueryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/patient/query.query
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get all items from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the PatientTable
      - DynamoDBCrudPolicy:
          TableName: !Ref PatientTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref PatientTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /patient
            Method: GET
            RestApiId:
              Ref: StafferGateway

  PatientTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  # Doctor Resource
  DoctorCreateFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/doctor/create.create
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the DoctorTable
      - DynamoDBCrudPolicy:
          TableName: !Ref DoctorTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref DoctorTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /doctor
            Method: POST
            RestApiId:
              Ref: StafferGateway
 
  DoctorReadFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/doctor/read.read
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get one item by id from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the DoctorTable
      - DynamoDBCrudPolicy:
          TableName: !Ref DoctorTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref DoctorTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /doctor/{id}
            Method: GET
            RestApiId:
              Ref: StafferGateway

  DoctorQueryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/doctor/query.query
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get all items from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the DoctorTable
      - DynamoDBCrudPolicy:
          TableName: !Ref DoctorTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref DoctorTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /doctor
            Method: GET
            RestApiId:
              Ref: StafferGateway

  DoctorTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  # API Gateway to create endpoints
  StafferGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      TracingEnabled: true
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Join:
        - ''
        - - ApplicationInsights-SAM-
          - Ref: AWS::StackName
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Fn::Join:
        - ''
        - - ApplicationInsights-SAM-
          - Ref: AWS::StackName
      AutoConfigurationEnabled: 'true'
    DependsOn: ApplicationResourceGroup
Outputs:
  WebEndpoint:
    Description: API Gateway endpoint URL for Prod stage
    Value: !Sub "https://${StafferGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
